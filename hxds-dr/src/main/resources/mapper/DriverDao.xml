<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.leis.hxdsdr.db.dao.DriverDao">
    <select id="hasDriver" parameterType="map" resultType="long">
        select count(id) as ct
        from tb_driver where 1=1
        <if test="openId!=null">
            and open_id =#{openId}
        </if>
        <if test="driverId!=null">
            and id = #{driverId}
        </if>
    </select>

    <insert id="registerNewDriver" parameterType="map">
        insert into tb_driver
        set open_id = #{openId}, nickname = #{nickname}, photo = #{photo}, real_auth=1, summary = '{"level":0,"totalOrder":0,"weekOrder":0,"weekComment":0,"appeal":0}', archive = false, `status` = 1
    </insert>

    <select id="searchDriverId" parameterType="String" resultType="String">
        select cast(id as char) as id
        from tb_driver
        where open_id = #{openId}
    </select>

    <update id="updateDriverAuth" parameterType="Map">
        update tb_driver
        set `name`            =#{name},
            sex               = #{sex},
            pid               = #{pid},
            birthday          = #{birthday},
            tel               = #{tel},
            mail_address      = #{mailAddress},
            contact_name      = #{contactName},
            contact_tel       = #{contactTel},
            email             = #{email},
            real_auth         = 3,
            idcard_address    = #{idCardAddress},
            idcard_expiration = #{idCardExpiration},
            idcard_front      = #{idCardFront},
            idcard_back       = #{idCardBack},
            idcard_holding=#{idCardHolding},
            drcard_type       = #{drcardType},
            drcard_expiration = #{drcardExpiration},
            drcard_issue_date = #{drcardIssueDate},
            drcard_front      = #{drcardFront},
            drcard_back       = #{drcardBack},
            drcard_holding    = #{drcardHolding}
        where id = #{driverId}
    </update>

    <select id="searchDriverNameAndSex" parameterType="long" resultType="HashMap">
        select name, sex
        from tb_driver
        where id = #{driverId}
    </select>

    <update id="updateDriverArchive" parameterType="long">
        update tb_driver
        set archive = 1
        where id = #{driverId}
    </update>

    <select id="login" parameterType="String" resultType="hashmap">
        select cast(id as char) as id, real_auth as realAuth, archive
        from tb_driver
        where `status` != 2
          and open_id = #{openId}
    </select>
</mapper>
